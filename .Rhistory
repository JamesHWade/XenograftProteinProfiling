m.alt
PlotNetwork(cellLine = c(6), treatment = c("(-)-Serum", "Erlotinib"), timePoint = c(24))
PlotNetwork(cellLine = c(6),
treatment = c("(-)-Serum"),# "Erlotinib"),
timePoint = c(24))
PlotNetwork(cellLine = c(6),
treatment = c("(-)-Serum"), "Erlotinib"),
timePoint = c(24))
PlotNetwork(cellLine = c(6),
treatment = c("(-)-Serum", "Erlotinib"),
timePoint = c(24))
m.alt
PlotNetwork <- function(cellLine, treatment, timePoint){
dat.1 <- filter(dat, Treatment %in% treatment & `Cell Line` %in%
cellLine & `Time Point` %in% timePoint)
dat.alt <<- dcast(dat.1, `Cell Line` + Treatment + `Time Point` +
Replicate + Id ~ Target, value.var = "Net Shift")
rownames(dat.alt) = paste(dat.alt$`Cell Line`, dat.alt$Treatment,
dat.alt$`Time Point`, dat.alt$Replicate, dat.alt$Id, sep = " ")
dat.alt[,c(1,2,3,4,5)] <- NULL
m.alt <<- as.matrix(dat.alt)
holder.r <- rcorr(scale(m.alt))
holder <- cor(m.alt)
g <- graph.adjacency(holder.r$r, mode = "undirected",
weighted = TRUE, diag = FALSE)
custom.layout <- function(g, ...) {
# layout.drl(g, weights = E(g)$weight, ...) # For bigger graphs
layout.fruchterman.reingold(g, weights = E(g)$weight, ...)
}
# Format edges
E(g)$cor <- E(g)$weight
E(g)$weight <- abs(E(g)$cor)
E(g)$color <- ifelse(E(g)$cor < 0, "blue", "darkred")
E(g)$width <- atanh(E(g)$weight)
# Format vertices
V(g)$size <- 3*abs(rowSums(holder.r$r))
V(g)$label.color <- "black"
V(g)$label.font <- 11
plot(g, layout = custom.layout)
plot(g, layout = layout.fruchterman.reingold)
g <- delete.edges(g, E(g)[ abs(weight) < 0.5 ])
plot(g, layout = layout_with_kk)
#corrplot(holder.r$r, type = "upper")
#corrplot(holder.r$P, type = "upper")
}
PlotNetwork(cellLine = c(6),
treatment = c("(-)-Serum", "Erlotinib"),
timePoint = c(24))
head(dat.alt)
View(dat.alt)
?rcorr
holder.r <- rcorr(scale(m.alt))
holder.r
View(holder.r)
holder.r$r
plot(holder.r$P)
plot(holder.r$r)
plot(holder.r$P)
PlotNetwork(cellLine = c(6),
treatment = c("(-)-Serum"),
timePoint = c(24))
corrplot(holder.r$r, type = "upper")
library(corrplot)
corrplot(holder.r$r, type = "upper")
corrplot(holder.r$P, type = "upper")
corrplot(holder.r$P, type = "upper", method = "color")
corrplot(holder.r$P, type = "upper", method = "color", col = NULL)
corrplot(holder.r$r, type = "upper", method = "color")
PlotNetwork(cellLine = c(6),
treatment = c("(-)-Serum", "Erlotinib"),
timePoint = c(24))
corrplot(holder.r$r, type = "upper", method = "color")
corrplot(holder.r$P, type = "upper", method = "color")
corrplot(holder.r$r, type = "upper", method = "color")
?rcorr
View(m.alt)
View(d.alt)
View(dat.alt)
plswork <- matrix()
treatment = c("(-)-Serum", "Erlotinib")
cellLine = c(6)
timePoint = c(24)
dat.1 <- filter(dat, Treatment %in% treatment & `Cell Line` %in%
cellLine & `Time Point` %in% timePoint)
dat.alt <<- dcast(dat.1, `Cell Line` + Treatment + `Time Point` +
Replicate + Id ~ Target, value.var = "Net Shift")
rownames(dat.alt) = paste(dat.alt$`Cell Line`, dat.alt$Treatment,
dat.alt$`Time Point`, dat.alt$Replicate, dat.alt$Id, sep = " ")
dat.alt[,c(1,2,3,4,5)] <- NULL
m.alt <<- as.matrix(dat.alt)
plswork <- data.frame()
for (i in treatment) {
dat.tmp <- filter(dat.1, Treatment == i) %>% select (Target)
plswork <- cbind(plswork, dat.tmp)
}
for (i in treatment) {
print(i)
dat.tmp <- filter(dat.1, Treatment == i) %>% select (Target)
plswork <- cbind(plswork, dat.tmp)
}
print(i)
dat.tmp <- filter(dat.1, Treatment == i) %>% select(Target)
dat.tmp
head(dat.1)
dat.tmp <- filter(dat.1, Treatment == i) %>% select(`Net Shift`)
for (i in treatment) {
print(i)
}
for (i in treatment) {
print(i)
dat.tmp <- filter(dat.1, Treatment == i) %>% select(`Net Shift`)
plswork <- cbind(plswork, dat.tmp)
}
print(i)
dat.tmp <- filter(dat.1, Treatment == i) %>% select(`Net Shift`)
dat.tmp
View(dat.alt)
dat.1 <- filter(dat, Treatment %in% treatment & `Cell Line` %in%
cellLine & `Time Point` %in% timePoint)
dat.alt <<- dcast(dat.1, `Cell Line` + Treatment + `Time Point` +
Replicate + Id ~ Target, value.var = "Net Shift")
rownames(dat.alt) = paste(dat.alt$`Cell Line`, dat.alt$Treatment,
dat.alt$`Time Point`, dat.alt$Replicate, dat.alt$Id, sep = " ")
dat.alt[,c(1,2,3,4,5)] <- NULL
dat.1 <- filter(dat, Treatment %in% treatment & `Cell Line` %in%
cellLine & `Time Point` %in% timePoint)
dat.dcast <<- dcast(dat.1, `Cell Line` + Treatment + `Time Point` +
Replicate + Id ~ Target, value.var = "Net Shift")
rownames(dat.alt) = paste(dat.alt$`Cell Line`, dat.alt$Treatment,
dat.alt$`Time Point`, dat.alt$Replicate, dat.alt$Id, sep = " ")
dat.alt <- dat.dcast[,c(1,2,3,4,5)] <- NULL
dat.dcast
View(dat.dcast)
dat.dcast <<- dcast(dat.1, `Cell Line` + Treatment + `Time Point` +
Replicate + Id ~ Target, value.var = "Net Shift")
View(dat.dcast)
dat.alt <- dat.dcast[,!c(1,2,3,4,5)]
dat.alt
dat.dcast <<- dcast(dat.1, `Cell Line` + Treatment + `Time Point` +
Replicate + Id ~ Target, value.var = "Net Shift")
dat.alt <- dat.dcast[,!c(1,2,3,4,5)]
dat.1 <- filter(dat, Treatment %in% treatment & `Cell Line` %in%
cellLine & `Time Point` %in% timePoint)
dat.dcast <<- dcast(dat.1, `Cell Line` + Treatment + `Time Point` +
Replicate + Id ~ Target, value.var = "Net Shift")
rownames(dat.alt) = paste(dat.alt$`Cell Line`, dat.alt$Treatment,
dat.alt$`Time Point`, dat.alt$Replicate, dat.alt$Id, sep = " ")
dat.alt <- dat.dcast
dat.alt[c(1,2,3,4,5)] <- NULL
m.alt <<- as.matrix(dat.alt)
dat.1 <- filter(dat, Treatment %in% treatment & `Cell Line` %in%
cellLine & `Time Point` %in% timePoint)
dat.1 <- filter(dat, Treatment %in% treatment & `Cell Line` %in%
cellLine & `Time Point` %in% timePoint)
dat.dcast <<- dcast(dat.1, `Cell Line` + Treatment + `Time Point` +
Replicate + Id ~ Target, value.var = "Net Shift")
dat.alt <- dat.dcast
rownames(dat.alt) = paste(dat.alt$`Cell Line`, dat.alt$Treatment,
dat.alt$`Time Point`, dat.alt$Replicate,
dat.alt$Id, sep = " ")
dat.alt[c(1,2,3,4,5)] <- NULL
dat.dcast
View(dat.dcast)
plswork <- data.frame()
for (i in treatment) {
print(i)
dat.tmp <- filter(dat.1, Treatment == i) %>% select(`Net Shift`)
plswork <- cbind(plswork, dat.tmp)
}
plswork <- data.frame()
for (i in treatment) {
print(i)
dat.tmp <- filter(dat.1, Treatment == i) %>% select(`Net Shift`)
plswork <- cbind(dat.tmp, pls.work)
}
pls.work <- data.frame()
for (i in treatment) {
print(i)
dat.tmp <- filter(dat.1, Treatment == i) %>% select(`Net Shift`)
plswork <- cbind(dat.tmp, pls.work)
}
dat.2 <- group_by(dat.1, Treatment, Target)
View(dat.2)
dat.2 <- group_by(dat.1, Treatment, Target, Replicate)
View(dat.2)
dat.2 <- group_by(dat.1, Treatment, Target, Replicate, Id)
View(dat.2)
?group_by
?assign
View(dat.dcast)
dat.2 <- group_by(dat.1, Treatment, CellLine) %>%
# Recast data as wide format from dataframe
dat.dcast <<- dcast(dat.1, `Cell Line` + Treatment + `Time Point` +
Replicate + Id + Target ~ Target, value.var = "Net Shift")
dat.1 <- filter(dat, Treatment %in% treatment & `Cell Line` %in%
cellLine & `Time Point` %in% timePoint)
dat.2 <- group_by(dat.1, Treatment, CellLine) %>%
# Recast data as wide format from dataframe
dat.dcast <<- dcast(dat.1, `Cell Line` + Treatment + `Time Point` +
Replicate + Id + Target ~ Target, value.var = "Net Shift")
dat.1 <- filter(dat, Treatment %in% treatment & `Cell Line` %in%
cellLine & `Time Point` %in% timePoint)
dat.dcast <<- dcast(dat.1, `Cell Line` + Treatment + `Time Point` +
Replicate + Id + Target ~ Target, value.var = "Net Shift")
View(dat.dcast)
View(dat.1)
dat.dcast <<- dcast(dat.1, `Cell Line` + Treatment + `Time Point` +
Replicate + Target ~ Id, value.var = "Net Shift")
View(dat.1)
View(dat.dcast)
holder.r <<- rcorr(cbind(dat.dcast$0, dat.dcast$1, dat.dcast$2, dat.dcast$3))
dat.alt <- dat.dcast
dat.alt[c(1,2,3,4)] <- NULL
dat.dcast <<- dcast(dat.1, `Cell Line` + Treatment + `Time Point` +
Target ~ Id + Replicate, value.var = "Net Shift")
View(dat.dcast)
dat.alt <- dat.dcast
rownames(dat.alt) = paste(dat.alt$`Cell Line`, dat.alt$Treatment,
dat.alt$`Time Point`, dat.alt$Target,
dat.alt$Id, sep = " ")
View(dat.alt)
dat.alt[c(1,2,3,4)] <- NULL
m.alt <<- as.matrix(dat.alt)
View(m.alt)
holder.r <<- rcorr()
holder.r <<- rcorr(m.alt)
corrplot(holder.r$r, type = "upper", method = "color")
corrplot(holder.r$P, type = "upper", method = "color")
corrplot(holder.r$r, type = "upper", method = "color")
holder.r$r
min(holder.r$r)
max(holder.r$p)
holder.r$P
holder.r$P
holder.r <<- rcorr(scale(m.alt))
holder.r$P
holder.r$r
holder.r$r
View(m.alt)
test <- group_by(dat.dcast, Treatment) %>% rowMeans()
View(dat.dcast)
test <- group_by(dat.dcast, Target, Treatment, `Time Point`) %>%
summarize_each(funs(rowMeans))
test <- group_by(dat.dcast, Target, Treatment, `Time Point`) %>%
tapply(rowMeans)
test <- group_by(dat.dcast, Target, Treatment, `Time Point`) %>%
rowMeans()
test <- group_by(dat.dcast, Target, Treatment, `Time Point`) #%>%
View(test)
g <- graph.adjacency(holder.r$r, mode = "undirected",
weighted = TRUE, diag = FALSE)
custom.layout <- function(g, ...) {
# layout.drl(g, weights = E(g)$weight, ...) # For bigger graphs
layout.fruchterman.reingold(g, weights = E(g)$weight, ...)
}
E(g)$cor <- E(g)$weight
E(g)$weight <- abs(E(g)$cor)
E(g)$color <- ifelse(E(g)$cor < 0, "blue", "darkred")
E(g)$width <- atanh(E(g)$weight)
V(g)$size <- 3*abs(rowSums(holder.r$r))
V(g)$label.color <- "black"
V(g)$label.font <- 11
plot(g, layout = custom.layout)
plot(g, layout = layout.fruchterman.reingold)
g <- delete.edges(g, E(g)[ abs(weight) < 0.5 ])
plot(g, layout = layout_with_kk)
corrplot(holder.r$r, type = "upper", method = "color")
corrplot(holder.r$P, type = "upper", method = "color")
corrplot(holder.r$r, type = "upper", method = "color")
dat.dcast <<- dcast(dat.1,
`Cell Line` + `Time Point` + Target ~
Id + Replicate + Treatment,
value.var = "Net Shift")
View(dat.dcast)
dat.1 <- filter(dat, Treatment %in% treatment & `Cell Line` %in%
cellLine & `Time Point` %in% timePoint)
dat.avg <- dat %>% group_by(Target, `Time Point`, `Cell Line`) %>%
summarise_each(funs(mean, sd), c(`Net Shift`))
View(dat.avg)
dat.avg <- dat %>% group_by(Target, `Time Point`, `Cell Line`, Treatment) %>%
summarise_each(funs(mean, sd), c(`Net Shift`))
View(dat.avg)
dat.dcast <<- dcast(dat.1,
`Cell Line` + `Time Point` + Target ~
Treatment,
value.var = "Net Shift")
dat.dcast <<- dcast(dat.avg,
`Cell Line` + `Time Point` + Target ~
Treatment,
value.var = "Net Shift")
dat.dcast <<- dcast(dat.avg,
`Cell Line` + `Time Point` + Target ~
Treatment,
value.var = mean)
dat.1 <- filter(dat, Treatment %in% treatment & `Cell Line` %in%
cellLine & `Time Point` %in% timePoint)
dat.avg <- dat.1 %>% group_by(Target, `Time Point`, `Cell Line`, Treatment) %>%
summarise_each(funs(mean, sd), c(`Net Shift`))
dat.dcast <<- dcast(dat.avg,
`Cell Line` + `Time Point` + Target ~
Treatment,
value.var = mean)
View(dat.avg)
dat.dcast <<- dcast(dat.avg,
Target ~ Treatment,
value.var = mean)
dat.dcast <<- dcast(dat.avg,
Treatment ~ Target,
value.var = mean)
names(dat.avg)[names(dat.avg) == 'mean'] <- 'Net Shift'
View(dat.avg)
dat.avg <- dat.1 %>% group_by(Target, `Time Point`, `Cell Line`, Treatment) %>%
summarise_each(funs(mean), c(`Net Shift`))
names(dat.avg)[names(dat.avg) == 'mean'] <- 'Net Shift'
dat.dcast <<- dcast(dat.avg,
Target ~ Treatment,
value.var = `Net Shift`)
dat.avg <- dat.1 %>% group_by(Target, `Time Point`, `Cell Line`, Treatment) %>%
summarise_each(funs(mean), c(`Net Shift`))
dat.avg
dat.dcast <<- dcast(dat.avg,
Target ~ Treatment,
value.var = `Net Shift`)
dat <- read_csv("compiledLabeled.csv")
dat <- select(dat, -Shift.1, -Shift.2, - Group)
dat <- filter(dat, !grepl("p53|Abl", Target))
dat$Id <- dat$Ring %% 4
dat.1 <- filter(dat, Treatment %in% treatment & `Cell Line` %in%
cellLine & `Time Point` %in% timePoint)
cellLine = c(6)
treatment = c("(-)-Serum", "Erlotinib")
timePoint = c(24)
dat.1 <- filter(dat, Treatment %in% treatment & `Cell Line` %in%
cellLine & `Time Point` %in% timePoint)
dat.avg <- dat.1 %>% group_by(Target, `Time Point`, `Cell Line`, Treatment) %>%
summarise_each(funs(mean), c(`Net Shift`))
names(dat.avg)[names(dat.avg) == 'mean'] <- 'Net Shift'
dat.2 <- group_by(dat.1, Treatment, CellLine)
dat.dcast <<- dcast(dat.avg,
Target ~ Treatment,
value.var = `Net Shift`)
dat.dcast <<- dcast(dat.avg,
Target ~ Treatment)
dat.dcast
m.alt <<- as.matrix(dat.alt)
dat.alt <- dat.dcast
m.alt <<- as.matrix(dat.alt)
holder.r <<- rcorr(scale(m.alt))
corrplot(holder.r$r, type = "upper", method = "color")
holder.r <<- rcorr(scale(m.alt))
holder.r <<- rcorr(dat.alt)
dat.alt
as.matrix(m.alt)
class(dat.alt)
View(dat.alt)
dat.alt
rownames(dat.alt) = dat.alt$Target
m.alt <<- as.matrix(dat.alt)
m.alt
m.alt <<- as.matrix(dat.alt[,c(2,3)])
m.alt
holder.r <<- rcorr(m.alt)
corrplot(holder.r$r, type = "upper", method = "color")
g <- graph.adjacency(holder.r$r, mode = "undirected",
weighted = TRUE, diag = FALSE)
custom.layout <- function(g, ...) {
# layout.drl(g, weights = E(g)$weight, ...) # For bigger graphs
layout.fruchterman.reingold(g, weights = E(g)$weight, ...)
}
E(g)$cor <- E(g)$weight
E(g)$weight <- abs(E(g)$cor)
E(g)$color <- ifelse(E(g)$cor < 0, "blue", "darkred")
E(g)$width <- atanh(E(g)$weight)
V(g)$size <- 3*abs(rowSums(holder.r$r))
V(g)$label.color <- "black"
V(g)$label.font <- 11
plot(g, layout = custom.layout)
plot(g, layout = layout.fruchterman.reingold)
g <- delete.edges(g, E(g)[ abs(weight) < 0.5 ])
plot(g, layout = layout_with_kk)
corrplot(holder.r$r, type = "upper", method = "color")
holer.r$r
holder.r$r
dat.avg <- dat %>% group_by(Target, `Time Point`, `Cell Line`, Treatment) %>%
summarise_each(funs(mean), c(`Net Shift`))
names(dat.avg)[names(dat.avg) == 'mean'] <- 'Net Shift'
dat.2 <- group_by(dat.1, Treatment, CellLine)
dat.dcast <<- dcast(dat.avg,
Target ~ Treatment)
dat.alt <- dat.dcast
rownames(dat.alt) = dat.alt$Target
m.alt <<- as.matrix(dat.alt[,c(2,3)])
m.alt <<- as.matrix(dat.alt[,!c(1)])
m.alt
m.alt <<- as.matrix(dat.alt[,-1])
m.alt
dat.avg <- dat %>% group_by(Target, `Time Point`, `Cell Line`, Treatment) %>%
summarise_each(funs(mean), c(`Net Shift`))
View(dat.avg)
dat.dcast <<- dcast(dat.avg,
Target ~ Treatment)
dat.alt <- dat.dcast
rownames(dat.alt) = dat.alt$Target
m.alt <<- as.matrix(dat.alt[,-1])
m.alt
dat.alt
dat.avg
View(dat.avg)
dat.dcast <<- dcast(dat.avg,
Target ~ Treatment + `Time Point`)
View(dat.avg)
dat.dcast
dat.dcast <<- dcast(dat.avg,
Target + `Time Point` + `Cell Line` ~ Treatment)
dat.dcast
dat.alt <- dat.dcast
dat.alt <- dat.dcast
rownames(dat.alt) = paste(dat.alt$Target + dat.alt$`Time Point` +
dat.alt$`Cell Line`, sep = " ")
View(dat.alt)
rownames(dat.alt) = paste(dat.alt$Target + dat.alt$`Time Point` +
dat.alt$`Cell Line`, sep = " ")
rownames(dat.alt) = paste(dat.alt$Target, dat.alt$`Time Point`,
dat.alt$`Cell Line`, sep = " ")
m.alt <<- as.matrix(dat.alt[,-c(1,2,3)])
m.alt
holder.r <<- rcorr(m.alt)
corrplot(holder.r$r, type = "upper", method = "color")
corrplot(holder.r$P, type = "upper")
corrplot(holder.r$r, type = "upper", method = "color")
ho.der.r$r
holder.r$r
min(holder.r$r)
g <- graph.adjacency(holder.r$r, mode = "undirected",
weighted = TRUE, diag = FALSE)
custom.layout <- function(g, ...) {
# layout.drl(g, weights = E(g)$weight, ...) # For bigger graphs
layout.fruchterman.reingold(g, weights = E(g)$weight, ...)
}
E(g)$cor <- E(g)$weight
E(g)$weight <- abs(E(g)$cor)
E(g)$color <- ifelse(E(g)$cor < 0, "blue", "darkred")
E(g)$width <- atanh(E(g)$weight)
V(g)$size <- 3*abs(rowSums(holder.r$r))
V(g)$label.color <- "black"
V(g)$label.font <- 11
plot(g, layout = custom.layout)
plot(g, layout = layout.fruchterman.reingold)
g <- delete.edges(g, E(g)[ abs(weight) < 0.5 ])
plot(g, layout = layout_with_kk)
corrplot(holder.r$r, type = "upper", method = "color")
plot(g, layout = layout_with_kk)
plot(g, layout = custom.layout)
plot(g, layout = layout.fruchterman.reingold)
g <- delete.edges(g, E(g)[ abs(weight) < 0.5 ])
plot(g, layout = layout_with_kk)
g <- delete.edges(g, E(g)[ abs(weight) < 0.9 ])
plot(g, layout = layout_with_kk)
plot(g, layout = layout_with_kk)
plot(g, layout = layout_with_kk)
g <- delete.edges(g, E(g)[ abs(weight) < 0.9 ])
plot(g, layout = custom.layout)
plot(g, layout = layout.fruchterman.reingold)
plot(g, layout = layout_with_kk)
plot(g, layout = custom.layout)
plot(g, layout = layout.fruchterman.reingold)
plot(g, layout = layout.fruchterman.reingold)
dat.avg <- dat %>% group_by(Target, `Time Point`, `Cell Line`, Treatment) %>%
summarise_each(funs(mean), c(`Net Shift`))
View(dat.avg)
dat.dcast <<- dcast(dat.avg,
Target + `Time Point` + `Cell Line` ~ Treatment)
View(dat.dcast)
dat.dcast <<- dcast(dat.avg,
Target + `Cell Line` ~ `Time Point` + Treatment)
dat.alt <- dat.dcast
dat.alt <- dat.dcast
rownames(dat.alt) = paste(dat.alt$Target, dat.alt$`Cell Line`, sep = " ")
m.alt <<- as.matrix(dat.alt[,-c(1,2,3)])
dat.alt <- dat.dcast
rownames(dat.alt) = paste(dat.alt$Target, dat.alt$`Cell Line`, sep = " ")
View(dat.alt)
m.alt <<- as.matrix(dat.alt[,-c(1,2,3)])
View(dat.alt)
View(dat.alt)
m.alt <<- as.matrix(dat.alt[,-c(1,2)])
holder.r <<- rcorr(m.alt)
g <- graph.adjacency(holder.r$r, mode = "undirected",
weighted = TRUE, diag = FALSE)
custom.layout <- function(g, ...) {
# layout.drl(g, weights = E(g)$weight, ...) # For bigger graphs
layout.fruchterman.reingold(g, weights = E(g)$weight, ...)
}
E(g)$cor <- E(g)$weight
E(g)$weight <- abs(E(g)$cor)
E(g)$color <- ifelse(E(g)$cor < 0, "blue", "darkred")
E(g)$width <- atanh(E(g)$weight)
V(g)$size <- 3*abs(rowSums(holder.r$r))
V(g)$label.color <- "black"
V(g)$label.font <- 11
g <- delete.edges(g, E(g)[ abs(weight) < 0.9 ])
plot(g, layout = custom.layout)
plot(g, layout = layout.fruchterman.reingold)
plot(g, layout = layout_with_kk)
corrplot(holder.r$r, type = "upper", method = "color")
dat.dcast <<- dcast(dat.avg,
Target + ~ `Time Point` + Treatment + `Cell Line`)
dat.avg <- dat %>% group_by(Target, `Time Point`, `Cell Line`, Treatment) %>%
summarise_each(funs(mean), c(`Net Shift`))
names(dat.avg)[names(dat.avg) == 'mean'] <- 'Net Shift'
dat.dcast <<- dcast(dat.avg,
Target + ~ `Time Point` + Treatment + `Cell Line`)

#format plot legend and colors
plots <- plots + theme(legend.key = element_rect(colour = 'white',
fill = 'white'), legend.key.size = unit(0.4, "cm")) +
scale_fill_manual(values = extPalette)
plots
#save figure
#filename = paste(timepointList[i],cellLineList[j], 'png', sep='.')
#ggsave(plots, file = filename, width = 8, height = 6)
}
plotEachTimepoint(1,1)
plotEachTimepoint <- function(i, j){
#create lists for data islation
timepointList <- unique(dat$`Time Point`)
cellLineList <- unique(dat$`Cell Line`)
dat.Timepoint <- dat[dat$`Time Point` == timepointList[i] &
dat$`Cell Line` == cellLineList[j],]
#set error bars
limits <- aes(ymax = `Relative Shift` + `Standard Deviation`,
ymin = `Relative Shift` - `Standard Deviation`)
#plot colors
extPalette <- c("#771155", "#AA4488", "#CC99BB", "#114477", "#4477AA",
"#77AADD", "#117777", "#44AAAA", "#77CCCC", "#117744",
"#44AA77", "#88CCAA", "#774411", "#AA7744", "#DDAA77",
"#771122", "#AA4455", "#DD7788")
#plot figure settings
plots <- ggplot(data = dat.Timepoint,
# group lets `ggplot` know we want different errorbars/bars for each day
aes(x = Treatment, y = `Relative Shift`, group = factor(Target))) +
geom_bar(stat = "identity", position = position_dodge(width = 0.9),
aes(fill = Target)) +
ylab("Net Shift (pm)") +
geom_errorbar(limits, width = 0.4, size = 0.3, colour = 'grey48',
position = position_dodge(width = 0.9)) +
theme_bw() + theme(panel.grid = element_blank(),
axis.title.x=element_blank()) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
ggtitle(paste(timepointList[i], " hour Treatment ", "GBM-", cellLineList[j], sep=''))
#format plot legend and colors
plots <- plots + theme(legend.key = element_rect(colour = 'white',
fill = 'white'), legend.key.size = unit(0.4, "cm")) +
scale_fill_manual(values = extPalette)
plots
#save figure
#filename = paste(timepointList[i],cellLineList[j], 'png', sep='.')
#ggsave(plots, file = filename, width = 8, height = 6)
}
plotEachTimepoint(1,1)
plotEachTarget(1)
plotEachTarget <- function(i){
library(readr)
library(ggplot2)
targetList <- unique(dat$Target)
dat.Target <- dat[dat$Target == targetList[i],]
#set error bars
limits <- aes(ymax = `Relative Shift` + `Standard Deviation`,
ymin = `Relative Shift` - `Standard Deviation`)
#plot figure
plots <- ggplot(data = dat.Target,
# group lets `ggplot` know we want different errorbars/bars for each day
aes(x = Treatment, y = `Relative Shift`,
group = interaction(factor(`Time Point`), factor(`Cell Line`)))) +
geom_bar(stat = "identity", aes(fill = interaction(factor(`Time Point`),
factor(`Cell Line`))), position = position_dodge(width = 0.9)) +
ylab("Net Shift (pm)") +
geom_errorbar(limits, width = 0.4, size = 0.3,
position = position_dodge(width = 0.9)) +
theme_bw() + theme(panel.grid = element_blank(),
axis.title.x=element_blank()) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
ggtitle(paste("Target ", targetList[i], sep=''))
#configure legend
plots <- plots + scale_fill_discrete(name="Cell Line and Treatment",
labels=c("GBM-6 1 h Treatment", "GBM-6 24 h Treatment",
"GBM-26 1 h Treatment", "GBM-26 24 h Treatment")) +
theme(legend.key = element_rect(colour = 'white',
fill = 'white'), legend.key.size = unit(0.4, "cm"))
plots
#save figure
#filename = paste(targetList[i], 'png', sep='.')
#ggsave(plots, file = filename, width = 8, height = 6)
}
plotEachTarget(3)
plotEachTarget <- function(i){
library(readr)
library(ggplot2)
targetList <- unique(dat$Target)
dat.Target <- dat[dat$Target == targetList[i],]
#set error bars
limits <- aes(ymax = `Relative Shift` + `Standard Deviation`,
ymin = `Relative Shift` - `Standard Deviation`)
#plot figure
plots <- ggplot(data = dat.Target,
# group lets `ggplot` know we want different errorbars/bars for each day
aes(x = Treatment, y = `Relative Shift`,
group = interaction(factor(`Time Point`), factor(`Cell Line`)))) +
geom_bar(stat = "identity", aes(fill = interaction(factor(`Time Point`),
factor(`Cell Line`))), position = position_dodge(width = 0.9)) +
ylab("Net Shift (pm)") +
geom_errorbar(limits, width = 0.4, size = 0.3,
position = position_dodge(width = 0.9)) +
theme_bw() + theme(panel.grid = element_blank(),
axis.title.x=element_blank()) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
ggtitle(paste("Target: ", targetList[i], sep=''))
#configure legend
plots <- plots + scale_fill_discrete(name="Cell Line and Treatment",
labels=c("GBM-6 1 h Treatment", "GBM-6 24 h Treatment",
"GBM-26 1 h Treatment", "GBM-26 24 h Treatment")) +
theme(legend.key = element_rect(colour = 'white',
fill = 'white'), legend.key.size = unit(0.4, "cm"))
plots
#save figure
#filename = paste(targetList[i], 'png', sep='.')
#ggsave(plots, file = filename, width = 8, height = 6)
}
plotEachTarget(3)
plotEachTarget(1)
plotEachTarget(2)
plotEachTarget(2)
plotEachTarget(3)
PlotEachTarget(4)
url <- "https://raw.githubusercontent.com/jwade1221/XenograftProteinProfiling/master/Combined_Averaged.csv"
filename <- basename(url)
download.file(url,destfile=filename)
library(readr)
dat <- read_csv(filename)
head(dat)
plotEachTarget <- function(i){
library(readr)
library(ggplot2)
targetList <- unique(dat$Target)
dat.Target <- dat[dat$Target == targetList[i],]
#set error bars
limits <- aes(ymax = `Relative Shift` + `Standard Deviation`,
ymin = `Relative Shift` - `Standard Deviation`)
#plot figure
plots <- ggplot(data = dat.Target,
# group lets `ggplot` know we want different errorbars/bars for each day
aes(x = Treatment, y = `Relative Shift`,
group = interaction(factor(`Time Point`), factor(`Cell Line`)))) +
geom_bar(stat = "identity", aes(fill = interaction(factor(`Time Point`),
factor(`Cell Line`))), position = position_dodge(width = 0.9)) +
ylab("Net Shift (pm)") +
geom_errorbar(limits, width = 0.4, size = 0.3,
position = position_dodge(width = 0.9)) +
theme_bw() + theme(panel.grid = element_blank(),
axis.title.x=element_blank()) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
ggtitle(paste("Target: ", targetList[i], sep=''))
#configure legend
plots <- plots + scale_fill_discrete(name="Cell Line and Treatment",
labels=c("GBM-6 1 h Treatment", "GBM-6 24 h Treatment",
"GBM-26 1 h Treatment", "GBM-26 24 h Treatment")) +
theme(legend.key = element_rect(colour = 'white',
fill = 'white'), legend.key.size = unit(0.4, "cm"))
plots
#save figure
#filename = paste(targetList[i], 'png', sep='.')
#ggsave(plots, file = filename, width = 8, height = 6)
}
plotEachTarget(3)
plotEachTimepoint <- function(i, j){
#create lists for data islation
timepointList <- unique(dat$`Time Point`)
cellLineList <- unique(dat$`Cell Line`)
dat.Timepoint <- dat[dat$`Time Point` == timepointList[i] &
dat$`Cell Line` == cellLineList[j],]
#set error bars
limits <- aes(ymax = `Relative Shift` + `Standard Deviation`,
ymin = `Relative Shift` - `Standard Deviation`)
#plot colors
extPalette <- c("#771155", "#AA4488", "#CC99BB", "#114477", "#4477AA",
"#77AADD", "#117777", "#44AAAA", "#77CCCC", "#117744",
"#44AA77", "#88CCAA", "#774411", "#AA7744", "#DDAA77",
"#771122", "#AA4455", "#DD7788")
#plot figure settings
plots <- ggplot(data = dat.Timepoint,
# group lets `ggplot` know we want different errorbars/bars for each day
aes(x = Treatment, y = `Relative Shift`, group = factor(Target))) +
geom_bar(stat = "identity", position = position_dodge(width = 0.9),
aes(fill = Target)) +
ylab("Net Shift (pm)") +
geom_errorbar(limits, width = 0.4, size = 0.3, colour = 'grey48',
position = position_dodge(width = 0.9)) +
theme_bw() + theme(panel.grid = element_blank(),
axis.title.x=element_blank()) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
ggtitle(paste(timepointList[i], " Hour Treatment ", "GBM-", cellLineList[j], sep=''))
#format plot legend and colors
plots <- plots + theme(legend.key = element_rect(colour = 'white',
fill = 'white'), legend.key.size = unit(0.4, "cm")) +
scale_fill_manual(values = extPalette)
plots
#save figure
#filename = paste(timepointList[i],cellLineList[j], 'png', sep='.')
#ggsave(plots, file = filename, width = 8, height = 6)
}
plotEachTimepoint(1,1)
plotEachTarget(1)
plotEachTarget(2)
plotEachTarget(3)
plotEachTarget(4)
plotEachTarget(5)
plotEachTarget(6)
plotEachTarget(7)
plotEachTarget(8)
plotEachTarget(9)
plotEachTarget(10)
plotEachTarget(11)
plotEachTarget(12)
plotEachTarget(13)
plotEachTarget(14)
plotEachTarget(15)
plotEachTimepoint(1,1)
url <- "https://raw.githubusercontent.com/jwade1221/XenograftProteinProfiling/master/Combined_Averaged.csv"
filename <- basename(url)
download.file(url,destfile=filename)
library(readr)
dat <- read_csv(filename)
head(dat)
plotEachTarget <- function(i){
library(readr)
library(ggplot2)
targetList <- unique(dat$Target)
dat.Target <- dat[dat$Target == targetList[i],]
#set error bars
limits <- aes(ymax = `Relative Shift` + `Standard Deviation`,
ymin = `Relative Shift` - `Standard Deviation`)
#plot figure
plots <- ggplot(data = dat.Target,
# group lets `ggplot` know we want different errorbars/bars for each day
aes(x = Treatment, y = `Relative Shift`,
group = interaction(factor(`Time Point`), factor(`Cell Line`)))) +
geom_bar(stat = "identity", aes(fill = interaction(factor(`Time Point`),
factor(`Cell Line`))), position = position_dodge(width = 0.9)) +
ylab("Net Shift (pm)") +
geom_errorbar(limits, width = 0.4, size = 0.3,
position = position_dodge(width = 0.9)) +
theme_bw() + theme(panel.grid = element_blank(),
axis.title.x=element_blank()) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
ggtitle(paste("Target: ", targetList[i], sep=''))
#configure legend
plots <- plots + scale_fill_discrete(name="Cell Line and Treatment",
labels=c("GBM-6 1 h Treatment", "GBM-6 24 h Treatment",
"GBM-26 1 h Treatment", "GBM-26 24 h Treatment")) +
theme(legend.key = element_rect(colour = 'white',
fill = 'white'), legend.key.size = unit(0.4, "cm"))
plots
#save figure
#filename = paste(targetList[i], 'png', sep='.')
#ggsave(plots, file = filename, width = 8, height = 6)
}
plotEachTarget(3)
plotEachTimepoint <- function(i, j){
#create lists for data islation
timepointList <- unique(dat$`Time Point`)
cellLineList <- unique(dat$`Cell Line`)
dat.Timepoint <- dat[dat$`Time Point` == timepointList[i] &
dat$`Cell Line` == cellLineList[j],]
#set error bars
limits <- aes(ymax = `Relative Shift` + `Standard Deviation`,
ymin = `Relative Shift` - `Standard Deviation`)
#plot colors
extPalette <- c("#771155", "#AA4488", "#CC99BB", "#114477", "#4477AA",
"#77AADD", "#117777", "#44AAAA", "#77CCCC", "#117744",
"#44AA77", "#88CCAA", "#774411", "#AA7744", "#DDAA77",
"#771122", "#AA4455", "#DD7788")
#plot figure settings
plots <- ggplot(data = dat.Timepoint,
# group lets `ggplot` know we want different errorbars/bars for each day
aes(x = Treatment, y = `Relative Shift`, group = factor(Target))) +
geom_bar(stat = "identity", position = position_dodge(width = 0.9),
aes(fill = Target)) +
ylab("Net Shift (pm)") +
geom_errorbar(limits, width = 0.4, size = 0.3, colour = 'grey48',
position = position_dodge(width = 0.9)) +
theme_bw() + theme(panel.grid = element_blank(),
axis.title.x=element_blank()) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
ggtitle(paste(timepointList[i], " Hour Treatment ", "GBM-", cellLineList[j], sep=''))
#format plot legend and colors
plots <- plots + theme(legend.key = element_rect(colour = 'white',
fill = 'white'), legend.key.size = unit(0.4, "cm")) +
scale_fill_manual(values = extPalette)
plots
#save figure
#filename = paste(timepointList[i],cellLineList[j], 'png', sep='.')
#ggsave(plots, file = filename, width = 8, height = 6)
}
plotEachTimepoint(1,1)
plotEachTarget(1)
plotEachTarget(2)
plotEachTarget(3)
plotEachTarget(4)
plotEachTarget(5)
plotEachTarget(6)
plotEachTarget(7)
plotEachTarget(8)
plotEachTarget(9)
plotEachTarget(10)
plotEachTarget(11)
plotEachTarget(12)
plotEachTarget(13)
plotEachTarget(14)
plotEachTarget(15)
plotEachTimepoint(1,1)
plotEachTimepoint(1,2)
plotEachTimepoint(2,1)
plotEachTimepoint(2,2)
update.packages()
install.packages('readr')
install.packages("readr")
knitr::opts_chunk$set(echo = FALSE)
url <- "https://raw.githubusercontent.com/jwade1221/
XenograftProteinProfiling/master/Combined_Averaged.csv"
filename <- basename(url)
download.file(url,destfile=filename)
library(readr)
dat <- read_csv(filename)
updateR()
install.packages('installr')
library(installr)
updateR()
update.packages()
library(readr)
dat <- read_csv(filename, col_names = ())
library(readr)
dat <- read_csv(filename, col_names = '')
library(readr)
dat <- read_csv(filename)
library(readr)
dat <- read_csv(filename, col_types = cols())
getwd()
setwd("D:/Google Drive/Research/GitRepositories/XenograftProteinProfiling/")
x <- rnorm(10)
x
x <- rnorm(10, 20 ,2)
x
summary(x)
str(x)
set.seed(1)
rnorm(5)
rnorm()
rnorm(5)
rnorm(5)
set.seed(1)
rnorm(5)
rnorm(5)
rnorm(5)
rpois(0,1)
rpois(10,1)
rpois(10,2)
rpois(10,20)
rpois(10,20)
ppoins(2,2)
ppois(2,2)
ppois(4,2)
ppois(6, 2)
set.seed(20)
x <- rnorm(100)
e <- rnorm(100, 0, 2)
y <- 0.5 + 2 * x + e
summary(y)
plot(x, y)
set.seed(10)
x <- rbinom(100, 1, 0.5)
e <- rnorm(100, 0, 2)
y <- 0.5 + 2 * x + e
summary(y)
plot(x,y)
set.seed(1)
x <- rnorm(100)
log.mu <- 0.5 + 0.3 * x
y <- rpois(100, exp(log.mu))
summary(y)
plot(x,y)
set.seed(1)
sample(1:10, 4)
sample(1:10, 4)
sample(letters, 5)
sample(1:10)
sample(1:10)
sample(1:10, replace = TRUE)
sample(1:10, replace = TRUE)
Rprof()
setwd("D:/Box Sync/Data/")
source('D:/Google Drive/Research/GitRepositories/XenograftProteinProfiling/1_ProcessRawRingData.R')
Rprof()
summaryRprof(RawGo())
setwd('20160908_gaskXP-001b_09082016/')
summaryRprof(RawGo())
summaryRprof()
summaryRprof(GetName)
GetName()
source('D:/Google Drive/Research/GitRepositories/XenograftProteinProfiling/1_ProcessRawRingData.R')
getwd()
RawGo()
library(swirl)
swirl()
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants,10)
tail(plants)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
flips <- sample(c(0,1), 100, prob = c(0.3, 0.7))
flips <- sample(c(0,1), 100, prob = c(0.3, 0.7), replace = TRUE)
flips
sum(flips)
?rbinom()
?rbinom
rbinome(1, size = 100, prob = 0.7)
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(1, 100, prob = 0.7)
flips2 <- rbinom(n = 100, size = 1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, 100, 25)
?rpois
rpois(5, 10)
my_pois <- replicate(100, rpois(5, 10))
my_pois
cm <- colMeans(my_pois)
his(cm)
hist(cm)
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist)
plot(x = cars$dist, y = cars$speed)
plot(x = cars$dist, y = cars$speed, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance", xlab = "Speed")
plot(cars, main = "My Plot")
plot(cars, main.sub = "My Plot")
plot(cars, sub = "My Plot Subtitle")
plot(cars, col = 2)
plot(cars, xlim = c(10, 15))
plot(cars, pch = 2)
load(mtcars)
mtcars
data(mtcars)
?boxplot
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist)
plot(x = cars$dist, y = cars$speed)
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance", xlab = "Speed")
plot(cars, main = "My Plot")
plot(cars, sub = "My Plot Subtitle")
plot(cars, col = 2)
plot(cars, xlim = c(10, 15))
plot(cars, pch = 2)
data(mtcars)
?boxplot
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
getwd()
setwd("D:/Google Drive/Research/GitRepositories/XenograftProteinProfiling/")
dat <- read.csv('Combined_Averaged.csv')
plot(dat)
hist(dat$Average.Shift)
hist(dat$Average.Shift, xlim = c(0,2000))
?hist
hist(dat$Average.Shift, xlim = c(0,2000), breaks = 30)
hist(dat$Average.Shift, breaks = 30)
hist(dat$Average.Shift, breaks = 100)
min(dat$Average.Shift)
str(dat$Average.Shift)
summary(dat$Average.Shift)
str(dat)
library(readr)
dat <- read_csv('Combined_Averaged.csv')
str(dat)
setwd("C:/Users/james_000/Downloads/")
setwd("rprog3/")
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
head(outcome)
ncol(outcome)
oucome[, 11] <- as.numeric(outcome[,11])
outcome[, 11] <- as.numeric(outcome[,11])
hist(outcome[,11])
source('~/.active-rstudio-document')
library(swirl)
swirl()

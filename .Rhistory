}
runType <- rep(runType, nrow(dat.run))
tmp <- cbind(dat.run, run, runType)
combinedData <- rbind(tmp, combinedData)
}
library(readr)
library(ggplot2)
library(dplyr)
setwd("C:/Users/BaileyLab/Desktop/SpinShift/")
fileList <- list.files()
combinedData <- data.frame()
for (i in fileList) {
name <- basename(i)
dat.run <- read_table(i, skip = 2, col_names = FALSE)
run <- rep(name, nrow(dat.run))
if ( grepl("Filled3A4_NoPur", name) ) {
runType <- "Nanodiscs No Purification"
} else if ( grepl("Free3A4", name) ) {
runType <- "Free CYP3A4"
} else if ( grepl("Filled3A4_Pur", name )) {
runType <- "Nanodiscs with Purification"
}
runType <- rep(runType, nrow(dat.run))
tmp <- cbind(dat.run, run, runType)
combinedData <- rbind(tmp, combinedData)
}
colnames(combinedData) <- c("Wavelength", "Absorbance", "Scan", "Type")
dat <- filter(combinedData, Type == "Nanodiscs with Purification")
g <- ggplot(dat, aes(Wavelength, Absorbance, color = Scan))
g + geom_line(size = 1) + xlim(350, 500) + facet_grid(.~Type)
library(readr)
library(ggplot2)
library(dplyr)
setwd("C:/Users/BaileyLab/Desktop/SpinShift/")
fileList <- list.files()
combinedData <- data.frame()
for (i in fileList) {
name <- basename(i)
dat.run <- read_table(i, skip = 2, col_names = FALSE)
run <- rep(name, nrow(dat.run))
if ( grepl("Filled3A4_NoPur", name) ) {
runType <- "Nanodiscs No Purification"
} else if ( grepl("Free3A4", name) ) {
runType <- "Free CYP3A4"
} else if ( grepl("Filled3A4_Pur", name )) {
runType <- "Nanodiscs with Purification"
}
runType <- rep(runType, nrow(dat.run))
tmp <- cbind(dat.run, run, runType)
combinedData <- rbind(tmp, combinedData)
}
colnames(combinedData) <- c("Wavelength", "Absorbance", "Scan", "Type")
g <- ggplot(combinedData, aes(Wavelength, Absorbance, color = Scan))
g + geom_line(size = 1) + xlim(350, 500) + facet_grid(.~Type)
library(readr)
library(ggplot2)
library(dplyr)
setwd("C:/Users/BaileyLab/Desktop/SpinShift/")
fileList <- list.files()
combinedData <- data.frame()
for (i in fileList) {
name <- basename(i)
dat.run <- read_table(i, skip = 2, col_names = FALSE)
run <- rep(name, nrow(dat.run))
if ( grepl("Filled3A4_NoPur", name) ) {
runType <- "Nanodiscs No Purification"
} else if ( grepl("Free3A4", name) ) {
runType <- "Free CYP3A4"
} else if ( grepl("Filled3A4_Pur", name )) {
runType <- "Nanodiscs with Purification"
}
runType <- rep(runType, nrow(dat.run))
tmp <- cbind(dat.run, run, runType)
combinedData <- rbind(tmp, combinedData)
}
library(readr)
library(ggplot2)
library(dplyr)
setwd("C:/Users/BaileyLab/Desktop/SpinShift/")
fileList <- list.files()
combinedData <- data.frame()
for (i in fileList) {
name <- basename(i)
dat.run <- read_table(i, skip = 2, col_names = FALSE)
run <- rep(name, nrow(dat.run))
if ( grepl("Filled3A4_NoPur", name) ) {
runType <- "Nanodiscs No Purification"
} else if ( grepl("Free3A4", name) ) {
runType <- "Free CYP3A4"
} else if ( grepl("Filled3A4_Pur", name )) {
runType <- "Nanodiscs with Purification"
}
runType <- rep(runType, nrow(dat.run))
tmp <- cbind(dat.run, run, runType)
combinedData <- rbind(tmp, combinedData)
}
getwd()
fileList <- list.files(pattern = ".csv")
combinedData <- data.frame()
for (i in fileList) {
name <- basename(i)
dat.run <- read_table(i, skip = 2, col_names = FALSE)
run <- rep(name, nrow(dat.run))
if ( grepl("Filled3A4_NoPur", name) ) {
runType <- "Nanodiscs No Purification"
} else if ( grepl("Free3A4", name) ) {
runType <- "Free CYP3A4"
} else if ( grepl("Filled3A4_Pur", name )) {
runType <- "Nanodiscs with Purification"
}
runType <- rep(runType, nrow(dat.run))
tmp <- cbind(dat.run, run, runType)
combinedData <- rbind(tmp, combinedData)
}
colnames(combinedData) <- c("Wavelength", "Absorbance", "Scan", "Type")
fileList <- list.files(pattern = ".ABS")
combinedData <- data.frame()
for (i in fileList) {
name <- basename(i)
dat.run <- read_table(i, skip = 2, col_names = FALSE)
run <- rep(name, nrow(dat.run))
if ( grepl("Filled3A4_NoPur", name) ) {
runType <- "Nanodiscs No Purification"
} else if ( grepl("Free3A4", name) ) {
runType <- "Free CYP3A4"
} else if ( grepl("Filled3A4_Pur", name )) {
runType <- "Nanodiscs with Purification"
}
runType <- rep(runType, nrow(dat.run))
tmp <- cbind(dat.run, run, runType)
combinedData <- rbind(tmp, combinedData)
}
colnames(combinedData) <- c("Wavelength", "Absorbance", "Scan", "Type")
dat <- filter(combinedData, Type == "Nanodiscs No Purification")
g <- ggplot(dat, aes(Wavelength, Absorbance, color = Scan))
g + geom_line(size = 1) + xlim(350, 500) # + facet_grid(.~Type)
dat <- filter(combinedData, Type == "Nanodiscs No Purification" & grepl("50uLBCT.A|Pur.A", Scan))
g <- ggplot(dat, aes(Wavelength, Absorbance, color = Scan))
g + geom_line(size = 1) + xlim(350, 500) # + facet_grid(.~Type)
g + geom_line(size = 1) # + xlim(350, 500) # + facet_grid(.~Type)
g + geom_line(size = 1)  + xlim(300, 500) # + facet_grid(.~Type)
g + geom_line(size = 1)  + xlim(325, 500) # + facet_grid(.~Type)
g + geom_line(size = 1)  + xlim(350, 500) # + facet_grid(.~Type)
g + geom_line(size = 1)  + xlim(350, 500) + ylim(0,0.25)# + facet_grid(.~Type)
g + geom_line(size = 1)  + xlim(350, 500) + ylim(0,0.25) +
theme_bw()
g + geom_line(size = 1)  + xlim(350, 500) + ylim(0,0.25) +
theme_bw() + scale_color_manual(c("red", "black"))
g + geom_line(size = 1)  + xlim(350, 500) + ylim(0,0.25) +
theme_bw() + scale_color_manual(values = c("red", "black"))
g + geom_line(size = 1)  + xlim(350, 500) + ylim(0,0.25) +
theme_bw() + theme(panel.background = element_blank()) +
scale_color_manual(values = c("red", "black"))
g + geom_line(size = 1)  + xlim(350, 500) + ylim(0,0.25) +
theme(axis.line = element_line(colour = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank())
g + geom_line(size = 1)  + xlim(350, 500) + ylim(0,0.25) +
theme(axis.line = element_line(colour = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank()) +
scale_color_manual(values = c("red", "black"))
g + geom_line(size = 1)  + xlim(350, 500) + ylim(0,0.25) +
theme(axis.line = element_line(colour = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank()) +
scale_color_manual(values = c("red", "black")) +
guides(color=guide_legend(override.aes=list(fill=NA)))
g + geom_line(size = 1)  + xlim(350, 500) + ylim(0,0.25) +
theme(axis.line = element_line(colour = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank()) +
scale_color_manual(values = c("red", "black")) +
guides(fill=NA)
g + geom_line(size = 1)  + xlim(350, 500) + ylim(0,0.25) +
theme(axis.line = element_line(colour = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank()) +
scale_color_manual(values = c("red", "black")) +
theme_bw()
g + geom_line(size = 1)  + xlim(350, 500) + ylim(0,0.25) +
theme_bw() + theme(axis.line = element_line(colour = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank()) +
scale_color_manual(values = c("red", "black"))
g2 <- ggplot(combinedData, aes(Wavelength, Absorbance, color = Scan))
g2 + geom_line(size = 1)  + xlim(350, 500) + ylim(0,0.25) + facet_grid(.~Type)
g2 + geom_line(size = 1)  + xlim(350, 500) + ylim(0,0.25) + facet_grid(Type~.)
g2 + geom_line(size = 1)  + xlim(350, 500) + facet_grid(Type~.)
g2 + geom_line(size = 1)  #+ xlim(350, 500) + facet_grid(Type~.)
g + geom_line(size = 1)  + xlim(350, 500) + ylim(0,0.25) +
theme_bw() + theme(axis.line = element_line(colour = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank()) +
scale_color_manual(values = c("red", "black"))
g + geom_line(size = 1)  + xlim(200, 500) + ylim(0,0.25) +
theme_bw() + theme(axis.line = element_line(colour = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank()) +
scale_color_manual(values = c("red", "black"))
g + geom_line(size = 1)  + xlim(200, 800) + ylim(0,0.25) +
theme_bw() + theme(axis.line = element_line(colour = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank()) +
scale_color_manual(values = c("red", "black"))
getwd()
setwd()
setwd("../20170203/20170203_gaskTestData_02032017/")
source('~/XenograftProteinProfiling/1_ProcessRawRingData.R')
GetName()
AggData()
AggData()
file.choose()
tk_choose.dir(getwd(), "Choose folder")
choose.dir()
getwd()
setwd(choose.dir())
getwd()
source('D:/Google Drive/Research/GitRepositories/XenograftProteinProfiling/01_LC-MRR.R', echo=TRUE)
AnalyzeData()
traceback()
source('D:/Google Drive/Research/GitRepositories/XenograftProteinProfiling/01_LC-MRR.R', echo=TRUE)
AnalyzeData()
AnalyzeData()
AnalyzeData()
dat <- read_csv(paste0(loc,"/", name, "_allRings_byRing.csv"))
loc <- "plots"
dat <- read_csv(paste0(loc,"/", name, "_allRings_byRing.csv"))
head(dat)
choose.dir()
choose.dir()
getwd()
source('D:/Google Drive/Research/GitRepositories/XenograftProteinProfiling/01_LC-MRR.R', echo=TRUE)
dat <- read_csv(paste0(loc,"/", name, "_allRings_byRing.csv"))
dat.avg <- dat %>% group_by(Ring) %>%
summarise_each(funs(sd), c(Shift))
head(dat.avg)
library(tidyverse)
dat <- read_csv(paste0(loc,"/", name, "_allRings_byRing.csv"))
dat.avg <- dat %>% group_by(Ring) %>%
summarise_each(funs(var), c(Shift))
dat.avg
ring.winner <- dat.avg$Shift < 10
ring.winner
filter(dat.avg, Ring < 10)
filter(dat.avg, Shift < 10)
ring.winner <- filter(dat.avg, Shift < 10) %>% select(Ring)
getwd()
hold <- filter(dat, grep(ring.winners, Ring))
CheckRingQuality <- function(loc = 'plots') {
library(tidyverse)
dat <- read_csv(paste0(loc,"/", name, "_allRings_byRing.csv"))
dat.avg <- dat %>% group_by(Ring) %>%
summarise_each(funs(var), c(Shift))
ringWinners <- filter(dat.avg, Shift < 10) %>% select(Ring)
write_csv(ringWinners, paste0(loc, '/', name, "_ringWinners"))
}
library(tidyverse)
dat <- read_csv(paste0(loc,"/", name, "_allRings_byRing.csv"))
dat.avg <- dat %>% group_by(Ring) %>%
summarise_each(funs(var), c(Shift))
ringWinners <- filter(dat.avg, Shift < 10) %>% select(Ring)
write_csv(ringWinners, paste0(loc, '/', name, "_ringWinners"))
dat <- read_csv(paste0(loc, '/', name, "_allRings.csv"))
ringWinners <- read_csv(paste0(loc, '/', name, "_ringWinners"))
ringWinners
grep(ringWinners, dat$Ring)
unique(dat$Ring()
)
unique(dat$Ring)
as.vector(ringWinners)
as.numeric(ringWinners)
unlist(ringWinner)
unlist(ringWinners)
class(unlist(ringWinners))
class(ringWinners)
ringWinners
as.vector(ringWinners)
unlist(ringWinners)
ringWinners <- read_csv(paste0(loc, '/', name, "_ringWinners"))
ringWinner <- unlist(ringWinners)
hold <- filter(dat, grep(ringWinner, Ring))
ringWinner == unique(dat$Ring)
ringWiner
ringWinner
class(ringWinner)
as.vector(ringWinner)
winners <- read_csv(paste0(loc, '/', name, "_ringWinners"))
rings <- as.vector(unlist(ringWinners))
rings
rings == unique(dat$Ring)
rings
rings %in% unique(dat$Ring)
unique(dat$Ring) %in% rings
unique(dat$Ring) == rings
hold <- grep(rings, dat$Ring)
hold
paste(rings, collapse = "|")
dat <- filter(dat, grep(paste(rings, collapse = "|"), Ring))
library(tidyverse)
winners <- read_csv(paste0(loc, '/', name, "_ringWinners"))
rings <- as.vector(unlist(ringWinners))
dat <- filter(dat, grep(paste(rings, collapse = "|"), Ring))
dat <- filter(dat, grepl(paste(rings, collapse = "|"), Ring))
source('D:/Google Drive/Research/GitRepositories/XenograftProteinProfiling/01_LC-MRR.R', echo=TRUE)
AnalyzeData(winner = TRUE, loc = "plots2")
AnalyzeData <- function(cntl = FALSE, loc = 'plots', winner = FALSE){
setwd(choose.dir())
GetName()
AggData(loc)
if (cntl == TRUE){
SubtractControl(loc, ch = 'U', cntl = "thermal")
}
PlotIndyRings(loc)
CheckRingQuality(loc)
DataSplitting(winner, loc)
PlotAvgData(loc)
}
AnalyzeData(winner = TRUE, loc = "plots2")
traceback()
source('D:/Google Drive/Research/GitRepositories/XenograftProteinProfiling/01_LC-MRR.R', echo=TRUE)
AnalyzeData(winner = TRUE, loc = "plots2")
source('D:/Google Drive/Research/GitRepositories/XenograftProteinProfiling/01_LC-MRR.R', echo=TRUE)
AnalyzeData(winner = TRUE, loc = "plots2")
source('D:/Google Drive/Research/GitRepositories/XenograftProteinProfiling/01_LC-MRR.R', echo=TRUE)
source('D:/Google Drive/Research/GitRepositories/XenograftProteinProfiling/01_LC-MRR.R', echo=TRUE)
AnalyzeData(winner = TRUE, loc = "plots2")
source('D:/Google Drive/Research/GitRepositories/XenograftProteinProfiling/01_LC-MRR.R', echo=TRUE)
AnalyzeData(winner = TRUE, loc = "plots2", delay = 10)
AnalyzeData(winner = TRUE, loc = "plots2", delay = 50)
AnalyzeData(winner = TRUE, loc = "plots2", delay = 40)
AnalyzeData(winner = FALSE, loc = "plots", delay = 40)
AnalyzeData(winner = FALSE, loc = "plots", delay = 45)
AnalyzeData(winner = TRUE, loc = "plots2", delay = 45)
AnalyzeData(winner = FALSE, loc = "plots", delay = 30)
AnalyzeData(winner = FALSE, loc = "plots", delay = 10)
AnalyzeData(winner = TRUE, loc = "plots2", delay = 10)
source('D:/Google Drive/Research/GitRepositories/XenograftProteinProfiling/01_LC-MRR.R', echo=TRUE)
AnalyzeData(winner = TRUE, loc = "plots2", delay = 10)
source('D:/Google Drive/Research/GitRepositories/XenograftProteinProfiling/01_LC-MRR.R', echo=TRUE)
AnalyzeData(winner = TRUE, loc = "plots2", delay = 10)
source('D:/Google Drive/Research/GitRepositories/XenograftProteinProfiling/01_LC-MRR.R', echo=TRUE)
AnalyzeData(winner = TRUE, loc = "plots2", delay = 10)
traceback()
DataSplitting <- function(winner, loc = 'plots', delay = 30){
library(tidyverse)
library(zoo)
library(pracma)
dat <- read_csv(paste0(loc, '/', name, "_allRings.csv"))
if (winner == TRUE) {
winners <- read_csv(paste0(loc, '/', name, "_ringWinners.csv"))
rings <- as.vector(unlist(ringWinners))
dat <- filter(dat, grepl(paste(rings, collapse = "|"), Ring))
}
kSmooth <- 3
flSavgol <- 31
fSavgol <- 4
dSavgol <- 0
mean <- function(x) {mean(x, trim = 0.5)}
dat.avg <- dat %>% group_by(Target, `Time Point`) %>%
summarise_each(funs(mean, sd), c(Time, Shift))
dat.avg$Smooth <- rollmean(dat.avg$Shift_mean,
k = kSmooth,
fill = "extend")
dat.avg$Savgol <- savgol(dat.avg$Shift_mean,
fl = flSavgol,
forder = fSavgol,
dorder = dSavgol)
#separates into subsets corrdinating to each PS injection
startTime <- delay
df0 <- subset(dat.avg, Time_mean > startTime &
Time_mean < startTime + 30)
df1 <- subset(dat.avg, Time_mean > startTime + 30 &
Time_mean < startTime + 61)
df2 <- subset(dat.avg, Time_mean > startTime + 61 &
Time_mean < startTime + 92)
df3 <- subset(dat.avg, Time_mean > startTime + 92 &
Time_mean < startTime + 123)
df4 <- subset(dat.avg, Time_mean > startTime + 123 &
Time_mean < startTime + 154)
df5 <- subset(dat.avg, Time_mean > startTime + 154 &
Time_mean < startTime + 185)
df6 <- subset(dat.avg, Time_mean > startTime + 185 &
Time_mean < startTime + 216)
df7 <- subset(dat.avg, Time_mean > startTime + 216 &
Time_mean < startTime + 247)
#add column with standard name
df0$Standard <- "Ethyl Acetate"
df1$Standard <- "1.3 kDa"
df2$Standard <- "3.5 kDa"
df3$Standard <- "8.7 kDa"
df4$Standard <- "17.6 kDa"
df5$Standard <- "35 kDa"
df6$Standard <- "130 kDa"
df7$Standard <- "304 kDa"
#smoothing data with rolling (moving) average
df0$Time_mean <- df0$Time_mean - df0$Time_mean[1]
df0$Shift_mean <- df0$Shift_mean - df0$Shift_mean[1]
df0$Smooth <- df0$Smooth - df0$Smooth[1]
df0$Savgol <- df0$Savgol - df0$Savgol[1]
df1$Time_mean <- df1$Time_mean - df1$Time_mean[1]
df1$Shift_mean <- df1$Shift_mean - df1$Shift_mean[1]
df1$Smooth <- df1$Smooth - df1$Smooth[1]
df1$Savgol <- df1$Savgol - df1$Savgol[1]
df2$Time_mean <- df2$Time_mean - df2$Time_mean[1]
df2$Shift_mean <- df2$Shift_mean - df2$Shift_mean[1]
df2$Smooth <- df2$Smooth - df2$Smooth[1]
df2$Savgol <- df2$Savgol - df2$Savgol[1]
df3$Time_mean <- df3$Time_mean - df3$Time_mean[1]
df3$Shift_mean <- df3$Shift_mean - df3$Shift_mean[1]
df3$Smooth <- df3$Smooth - df3$Smooth[1]
df3$Savgol <- df3$Savgol - df3$Savgol[1]
df4$Time_mean <- df4$Time_mean - df4$Time_mean[1]
df4$Shift_mean <- df4$Shift_mean - df4$Shift_mean[1]
df4$Smooth <- df4$Smooth - df4$Smooth[1]
df4$Savgol <- df4$Savgol - df4$Savgol[1]
df5$Time_mean <- df5$Time_mean - df5$Time_mean[1]
df5$Shift_mean <- df5$Shift_mean - df5$Shift_mean[1]
df5$Smooth <- df5$Smooth - df5$Smooth[1]
df5$Savgol <- df5$Savgol - df5$Savgol[1]
df6$Time_mean <- df6$Time_mean - df6$Time_mean[1]
df6$Shift_mean <- df6$Shift_mean - df6$Shift_mean[1]
df6$Smooth <- df6$Smooth - df6$Smooth[1]
df6$Savgol <- df6$Savgol - df6$Savgol[1]
df7$Time_mean <- df7$Time_mean - df7$Time_mean[1]
df7$Shift_mean <- df7$Shift_mean - df7$Shift_mean[1]
df7$Smooth <- df7$Smooth - df7$Smooth[1]
df7$Savgol <- df7$Savgol - df7$Savgol[1]
df <- rbind(df0, df1, df2, df3, df4, df5, df6, df7)
df$Standard <- factor(df$Standard,
levels = c("Ethyl Acetate","1.3 kDa",
"3.5 kDa", "8.7 kDa", "17.6 kDa",
"35 kDa", "130 kDa", "304 kDa"))
write_csv(x = df,
path = paste0(loc, "/", name, "inj_combined.csv"))
}
DataSplitting(winner, loc, delay)
DataSplitting(winner = T, loc, delay = 10)
source('D:/Google Drive/Research/GitRepositories/XenograftProteinProfiling/01_LC-MRR.R', echo=TRUE)
DataSplitting(winner = T, loc, delay = 10)
library(tidyverse)
library(zoo)
library(pracma)
dat <- read_csv(paste0(loc, '/', name, "_allRings.csv"))
if (winner == TRUE) {
winners <- read_csv(paste0(loc, '/', name, "_ringWinners.csv"))
rings <- as.vector(unlist(ringWinners))
dat <- filter(dat, grepl(paste(rings, collapse = "|"), Ring))
}
kSmooth <- 1
winner = TRUE
dat <- read_csv(paste0(loc, '/', name, "_allRings.csv"))
if (winner == TRUE) {
winners <- read_csv(paste0(loc, '/', name, "_ringWinners.csv"))
rings <- as.vector(unlist(ringWinners))
dat <- filter(dat, grepl(paste(rings, collapse = "|"), Ring))
}
head(dat)
loc <- 'plots2'
if (winner == TRUE) {
winners <- read_csv(paste0(loc, '/', name, "_ringWinners.csv"))
rings <- as.vector(unlist(ringWinners))
dat <- filter(dat, grepl(paste(rings, collapse = "|"), Ring))
}
head(dat)
dat <- read_csv(paste0(loc, '/', name, "_allRings.csv"))
if (winner == TRUE) {
winners <- read_csv(paste0(loc, '/', name, "_ringWinners.csv"))
rings <- as.vector(unlist(ringWinners))
dat <- filter(dat, grepl(paste(rings, collapse = "|"), Ring))
}
winners <- read_csv(paste0(loc, '/', name, "_ringWinners.csv"))
rings <- as.vector(unlist(ringWinners))
ringWinner
getwd()
library(tidyverse)
library(zoo)
library(pracma)
dat <- read_csv(paste0(loc, '/', name, "_allRings.csv"))
winners <- read_csv(paste0(loc, '/', name, "_ringWinners.csv"))
winners
rings <- as.vector(unlist(ringWinners))
rings
winners <- read_csv(paste0(loc, '/', name, "_ringWinners.csv"))
rings <- as.vector(unlist(winners))
dat <- filter(dat, grepl(paste(rings, collapse = "|"), Ring))
source('D:/Google Drive/Research/GitRepositories/XenograftProteinProfiling/01_LC-MRR.R', echo=TRUE)
AnalyzeData(loc = "plots2", winner = TRUE, delay = 10)
setwd("../20170508_M1_50uL_gaskBlank_TC_05082017_0/")
AnalyzeData(loc = "plots2", winner = TRUE, delay = 45)
source('D:/Google Drive/Research/GitRepositories/XenograftProteinProfiling/01_LC-MRR.R', echo=TRUE)
AnalyzeData(loc = "plots2", winner = TRUE, delay = 45)
source('D:/Google Drive/Research/GitRepositories/XenograftProteinProfiling/01_LC-MRR.R', echo=TRUE)
AnalyzeData(loc = "plots2", winner = TRUE, delay = 45)

group_by(Target, `Time Point`, `Cell Line`, Treatment) %>%
summarise_each(funs(mean), c(`Net Shift`))
names(dat.avg)[names(dat.avg) == 'mean'] <- 'Net Shift'
# Recast data as wide format from dataframe
dat.dcast <<- dcast(dat.avg,
Target ~ `Cell Line` + `Time Point` + Treatment)
# Remove label colums and convert to matrix
dat.alt <- dat.dcast
rownames(dat.alt) <- dat.alt$Target
m.alt <<- as.matrix(dat.alt[,-1])
holder.r <<- rcorr(m.alt)
cov.r <<- cov(m.alt)
g <<- graph.adjacency(holder.r$r, mode = "undirected",
weighted = TRUE, diag = FALSE)
g.cov <<-graph.adjacency(cov.r, mode = "undirected", weighted = TRUE,
diag = FALSE)
}
PlotTargets(cellLine = c(6),
treatment = c("Apitolisib", "GNE-317", "DMSO",
"Erlotinib", "Palbociclib"),
timePoint = c(24))
PlotTargets(cellLine = c(6, 26),
treatment = c("Apitolisib", "GNE-317", "DMSO",
"Erlotinib", "Palbociclib"),
timePoint = c(1, 24))
library(tidyverse)
library(reshape2)
library(Hmisc)
library(corrplot)
library(igraph)
dat <- read_csv("compiledLabeled.csv")
dat <- select(dat, -Shift.1, -Shift.2, - Group)
dat <- filter(dat, !grepl("p53|Abl", Target))
dat$Id <- dat$Ring %% 4
PlotTargets <- function(cellLine, treatment, timePoint){
# Filter data based on cell line, treatment, & time point
dat.tar <- filter(dat, Treatment %in% treatment & `Cell Line` %in%
cellLine & `Time Point` %in% timePoint)
# Recast data as wide format from dataframe
dat.dcast <<- dcast(dat.tar,
Treatment ~ Target + `Cell Line` + `Time Point`,
value.var = "Net Shift",
fun.aggregate = mean)
# Remove label colums and convert to matrix
dat.alt <- dat.dcast
rownames(dat.alt) <- dat.alt$Target
dat.alt$Treatment <- NULL
m.alt <- as.matrix(dat.alt)
holder.r <<- rcorr(m.alt, type = "pearson")
alt.r <- rcorr(m.alt, type = "spearman")
cov.r <<- cov(m.alt)
g <<- graph.adjacency(holder.r$r, mode = "undirected",
weighted = TRUE, diag = FALSE)
g.spear <<- graph.adjacency(holder.r$r, mode = "undirected",
weighted = TRUE, diag = FALSE)
g.cov <<-graph.adjacency(cov.r, mode = "undirected", weighted = TRUE,
diag = FALSE)
}
PlotTreatments <- function(cellLine, treatment, timePoint){
# Filter data based on cell line, treatment, & time point
dat.txt <- filter(dat, Treatment %in% treatment & `Cell Line` %in%
cellLine & `Time Point` %in% timePoint)
dat.avg <- dat.txt %>%
group_by(Target, `Time Point`, `Cell Line`, Treatment) %>%
summarise_each(funs(mean), c(`Net Shift`))
names(dat.avg)[names(dat.avg) == 'mean'] <- 'Net Shift'
# Recast data as wide format from dataframe
dat.dcast <<- dcast(dat.avg,
Target ~ `Cell Line` + `Time Point` + Treatment)
# Remove label colums and convert to matrix
dat.alt <- dat.dcast
rownames(dat.alt) <- dat.alt$Target
m.alt <<- as.matrix(dat.alt[,-1])
holder.r <<- rcorr(m.alt)
cov.r <<- cov(m.alt)
g <<- graph.adjacency(holder.r$r, mode = "undirected",
weighted = TRUE, diag = FALSE)
g.cov <<-graph.adjacency(cov.r, mode = "undirected", weighted = TRUE,
diag = FALSE)
}
PlotTargets(cellLine = c(6, 26),
treatment = c("Apitolisib", "GNE-317", "DMSO",
"Erlotinib", "Palbociclib"),
timePoint = c(1, 24))
PlotTreatments(cellLine = c(6, 26),
treatment = c("Erlotinib", "Palbociclib", "DMSO",
"Apitolisib", "GNE-317"),
timePoint = c(1, 24))
CustomGraph(graph = g)
CustomGraph <- function(graphit) {
E(graph)$cor <- E(graph)$weight
E(graph)$weight <- abs(E(graph)$cor)
E(graph)$color <- ifelse(E(graph)$cor < 0, "darkblue", "grey50")
E(graph)$width <- 3 * atanh(E(graph)$weight)
V(graph)$label <- NA
}
CustomGraph(graph = g)
CustomGraph(graphit = g)
graph <- g
CustomGraph <- function(graph) {
E(graph)$cor <- E(graph)$weight
E(graph)$weight <- abs(E(graph)$cor)
E(graph)$color <- ifelse(E(graph)$cor < 0, "darkblue", "grey50")
E(graph)$width <- 3 * atanh(E(graph)$weight)
V(graph)$label <- NA
}
graph <- g
PlotTreatments(cellLine = c(6, 26),
treatment = c("Erlotinib", "Palbociclib", "DMSO",
"Apitolisib", "GNE-317"),
timePoint = c(1, 24))
CustomGraph(graphit = g)
CustomGraph(graph = g)
E(g)$cor <- E(g)$weight
E(g)$weight <- abs(E(g)$cor)
E(g)$color <- ifelse(E(g)$cor < 0, "darkblue", "grey")
E(g)$width <- atanh(E(g)$weight)
V(g)$label <- NA
colors <- c("orange", "blue")
V(g)$color <- ifelse(grepl("26", V(g)$name), "#ffffbf", "#91bfdb")
g <- delete.edges(g, E(g)[ abs(weight) < 0.6 ])
plot(g, layout = layout.fruchterman.reingold)
plot(g, layout = layout_with_kk)
legend(x=-1.75, y=-0.1, c("GBM 26","GBM 6"), pch=21,
col="#777777", pt.bg=c('#ffffbf', "#91bfdb"), pt.cex=3, cex=3, bty="n")
corrplot(holder.r$r, method = "color")
setwd("D:/Box Sync/Data/")
library(tidyverse)
library(reshape2)
library(Hmisc)
library(corrplot)
dat <- read_csv("compiledLabeled.csv")
dat <- select(dat, -Shift.1, -Shift.2, - Group)
library(igraph)
dat <- filter(dat, !grepl("p53|Abl", Target))
dat$Id <- dat$Ring %% 4
setwd("D:/Box Sync/Data/")
library(tidyverse)
dat <- read_csv("compiledLabeled.csv")
dat <- select(dat, -Shift.1, -Shift.2, - Group)
dat <- filter(dat, !grepl("p53|Abl", Target))
dat$Id <- dat$Ring %% 4
head(dat)
dat.dcast <<- dcast(dat,
Treatment ~ Target + `Cell Line` + `Time Point`,
value.var = "Net Shift",
fun.aggregate = mean)
head(dat.dcast)
dat.dcast <<- dcast(dat,
Treatment ~ Target,
value.var = "Net Shift",
fun.aggregate = mean)
head(dat.dcast)
plot(dat.dcast$`hydroxy-HIF Pro564` ~ dat.dcast$`pAkt Ser473`)
dat.dcast <<- dcast(dat,
Treatment + `Time Point` ~ Target,
value.var = "Net Shift",
fun.aggregate = mean)
head(dat.dcast)
dat.dcast <<- dcast(dat,
Treatment + `Time Point` + `Cell LIne` ~ Target,
value.var = "Net Shift",
fun.aggregate = mean)
dat.dcast <<- dcast(dat,
Treatment + `Time Point` + `Cell Line` ~ Target,
value.var = "Net Shift",
fun.aggregate = mean)
head(dat.dcast)
head(dat)
dat.dcast <<- dcast(dat,
Treatment + `Time Point` + `Cell Line` + Id ~ Target,
value.var = "Net Shift",
fun.aggregate = mean)
head(dat.dcast)
plot(dat.dcast$`hydroxy-HIF Pro564` ~ dat.dcast$`pAkt Ser473`)
ggplot(dat.dcast, aes(x = hydroxy-HIF Pro564, y = pAkt Ser473, color = Treatment))
ggplot(dat.dcast, aes(x = `hydroxy-HIF Pro564``, y = `pAkt Ser473`, color = Treatment))
ggplot(dat.dcast, aes(x = `hydroxy-HIF Pro564`, y = `pAkt Ser473`, color = Treatment))
plot + geom_point()
plot <- ggplot(dat.dcast,
aes(x = `hydroxy-HIF Pro564`,
y = `pAkt Ser473`,
color = Treatment))
plot + geom_point()
library(ggtheme)
plot + geom_point() + theme_few()
plot <- ggplot(dat.dcast,
aes(x = `hydroxy-HIF Pro564`,
y = `pAkt Ser473`,
color = Treatment,
shape = `Cell Line`))
plot + geom_point() + theme_few()
dat.dcast$`Cell Line` <- factor(dat.dcast$`Cell Line`)
plot <- ggplot(dat.dcast,
aes(x = `hydroxy-HIF Pro564`,
y = `pAkt Ser473`,
color = Treatment,
shape = `Cell Line`))
plot + geom_point() + theme_few()
plot + geom_point(size = 2) + theme_few()
plot + geom_point(size = 8) + theme_few()
plot + geom_point(size = 6) + theme_few()
plot + geom_point(size = 4) + theme_few()
unique(dat$Target)
plot <- ggplot(dat.dcast,
aes(x = `pPDK1 Ser341`,
y = `pAkt Ser473`,
color = Treatment,
shape = `Cell Line`))
plot + geom_point(size = 4) + theme_few()
plot <- ggplot(dat.dcast,
aes(x = `pRb Ser780`,
y = `pAkt Ser473`,
color = Treatment,
shape = `Cell Line`))
plot + geom_point(size = 4) + theme_few()
plot <- ggplot(dat.dcast,
aes(x = `pRb Ser780`,
y = `pMAPK Thr202/Tyr204`,
color = Treatment,
shape = `Cell Line`))
plot + geom_point(size = 4) + theme_few()
plot <- ggplot(dat.dcast,
aes(x = `pRb Ser780`,
y = `pS6 Ser240/4`,
color = Treatment,
shape = `Cell Line`))
plot + geom_point(size = 4) + theme_few()
plot <- ggplot(dat.dcast,
aes(x = `pp70S6K Thr389`,
y = `pS6 Ser240/4`,
color = Treatment,
shape = `Cell Line`))
plot + geom_point(size = 4) + theme_few()
plot <- ggplot(dat.dcast,
aes(x = `pp70S6K Thr389`,
y = `pS6 Ser240/4`,
color = Treatment,
shape = interatction(`Cell Line`, `Time Point`)))
plot + geom_point(size = 4) + theme_few()
plot <- ggplot(dat.dcast,
aes(x = `pp70S6K Thr389`,
y = `pS6 Ser240/4`,
color = Treatment,
shape = interaction(`Cell Line`, `Time Point`)))
plot + geom_point(size = 4) + theme_few()
unique(dat$Target)
plot <- ggplot(dat.dcast,
aes(x = `pGSK3Î² Ser9`,
y = `pS6 Ser240/4`,
color = Treatment,
shape = interaction(`Cell Line`, `Time Point`)))
plot + geom_point(size = 4) + theme_few()
plot <- ggplot(dat.dcast,
aes(x = `pSrc Tyr416`,
y = `pS6 Ser240/4`,
color = Treatment,
shape = interaction(`Cell Line`, `Time Point`)))
plot + geom_point(size = 4) + theme_few()
plot <- ggplot(dat.dcast,
aes(x = `pmTOR Ser2448`,
y = `pS6 Ser240/4`,
color = Treatment,
shape = interaction(`Cell Line`, `Time Point`)))
plot + geom_point(size = 4) + theme_few()
plot <- ggplot(dat.dcast,
aes(x = `pS6 Ser235/6`,
y = `pS6 Ser240/4`,
color = Treatment,
shape = interaction(`Cell Line`, `Time Point`)))
plot + geom_point(size = 4) + theme_few()
plot <- ggplot(dat.dcast,
aes(x = `pS6 Ser235/6`,
y = `pRb Ser807/11`,
color = Treatment,
shape = interaction(`Cell Line`, `Time Point`)))
plot + geom_point(size = 4) + theme_few()
plot <- ggplot(dat.dcast,
aes(x = `pS6 Ser235/6`,
y = `pRb Ser807/11`,
color = Treatment,
shape = interaction(`Cell Line`, `Time Point`)))
plot + geom_point(size = 4) + theme_few()
plot + geom_point(aes(size = 4) + theme_few()
plot(dat.dcast$`hydroxy-HIF Pro564` ~ dat.dcast$`pAkt Ser473`)
plot + geom_point(aes(size = 4)) + theme_few()
head(dat.dcast)
`Time Point
plot + geom_point(aes(size = `Time Point`)) + theme_few()
plot + geom_point(aes(size = `Time Point`)) + theme_few()
plot + geom_point(size = 4) + theme_few()
plot + geom_line(size = 4) + theme_few()
plot + geom_point(size = 4) + theme_few()
setwd("D:/Google Drive/Research/Notebook/2017/06/21/20170621_gaskMXP-01a_06212017/")
setwd("D:/Box Sync/Data/")
library(tidyverse)
library(reshape2)
library(Hmisc)
library(corrplot)
library(igraph)
dat <- read_csv("compiledLabeled.csv")
dat <- select(dat, -Shift.1, -Shift.2, - Group)
dat <- filter(dat, !grepl("p53|Abl", Target))
dat$Id <- dat$Ring %% 4
PlotTargets <- function(cellLine, treatment, timePoint){
# Filter data based on cell line, treatment, & time point
dat.tar <- filter(dat, Treatment %in% treatment & `Cell Line` %in%
cellLine & `Time Point` %in% timePoint)
# Recast data as wide format from dataframe
dat.dcast <<- dcast(dat.tar,
Treatment ~ Target + `Cell Line` + `Time Point`,
value.var = "Net Shift",
fun.aggregate = mean)
# Remove label colums and convert to matrix
dat.alt <- dat.dcast
rownames(dat.alt) <- dat.alt$Target
dat.alt$Treatment <- NULL
m.alt <- as.matrix(dat.alt)
holder.r <<- rcorr(m.alt, type = "pearson")
alt.r <- rcorr(m.alt, type = "spearman")
cov.r <<- cov(m.alt)
g <<- graph.adjacency(holder.r$r, mode = "undirected",
weighted = TRUE, diag = FALSE)
g.spear <<- graph.adjacency(holder.r$r, mode = "undirected",
weighted = TRUE, diag = FALSE)
g.cov <<-graph.adjacency(cov.r, mode = "undirected", weighted = TRUE,
diag = FALSE)
}
PlotTreatments <- function(cellLine, treatment, timePoint){
# Filter data based on cell line, treatment, & time point
dat.txt <- filter(dat, Treatment %in% treatment & `Cell Line` %in%
cellLine & `Time Point` %in% timePoint)
dat.avg <- dat.txt %>%
group_by(Target, `Time Point`, `Cell Line`, Treatment) %>%
summarise_each(funs(mean), c(`Net Shift`))
names(dat.avg)[names(dat.avg) == 'mean'] <- 'Net Shift'
# Recast data as wide format from dataframe
dat.dcast <<- dcast(dat.avg,
Target ~ `Cell Line` + `Time Point` + Treatment)
# Remove label colums and convert to matrix
dat.alt <- dat.dcast
rownames(dat.alt) <- dat.alt$Target
m.alt <<- as.matrix(dat.alt[,-1])
holder.r <<- rcorr(m.alt)
cov.r <<- cov(m.alt)
g <<- graph.adjacency(holder.r$r, mode = "undirected",
weighted = TRUE, diag = FALSE)
g.cov <<-graph.adjacency(cov.r, mode = "undirected", weighted = TRUE,
diag = FALSE)
}
PlotTargets(cellLine = c(6, 26),
treatment = c("Apitolisib", "GNE-317", "DMSO",
"Erlotinib", "Palbociclib"),
timePoint = c(1, 24))
CustomGraph <- function(graph) {
E(graph)$cor <- E(graph)$weight
E(graph)$weight <- abs(E(graph)$cor)
E(graph)$color <- ifelse(E(graph)$cor < 0, "darkblue", "grey50")
E(graph)$width <- 3 * atanh(E(graph)$weight)
V(graph)$label <- NA
}
graph <- g
CustomGraph(graphit = graph)
PlotTargets(cellLine = c(6, 26),
treatment = c("Apitolisib", "GNE-317", "DMSO",
"Erlotinib", "Palbociclib"),
timePoint = c(1, 24))
CustomGraph <- function(graph) {
E(graph)$cor <- E(graph)$weight
E(graph)$weight <- abs(E(graph)$cor)
E(graph)$color <- ifelse(E(graph)$cor < 0, "darkblue", "grey50")
E(graph)$width <- 3 * atanh(E(graph)$weight)
V(graph)$label <- NA
}
graph <- g
CustomGraph(graphit = graph)
CustomGraph(graph = graph)
V(graph)$label <- NA
colorList <- c("#a6cee3", "#1f78b4", "#b2df8a", "#33a02c", "#fb9a99", "#e31a1c",
"#fdbf6f", "#ff7f00", "#cab2d6", "#6a3d9a", "#ffff99", "#b15928",
"grey50")
targetList <- c("pPDK1 Ser341", "pGSK3Î² Ser9", "pp70S6K Thr389", "pS6 Ser235/6",
"pRb Ser780", "pAkt Thr308", "pS6 Ser240/4", "pRb Ser807/11",
"pmTOR Ser2448", "pMAPK Thr202/Tyr204", "pAkt Ser473",
"pSrc Tyr416", "hydroxy-HIF Pro564")
colors <- rep(colorList, each = 1)
V(graph)$color <- colors
graph <- delete.edges(graph, E(graph)[ abs(weight) < 0.8 ])
plot(graph, layout = layout.fruchterman.reingold)
plot(graph, layout = layout_as_star)
plot(graph, layout = layout_with_graphopt)
plot(graph, layout = layout_as_tree)
legend(x = -2, y = 1, targetList, pch=21,
col="grey50", pt.bg= colorList ,bty="n", ncol=1)
corrplot(holder.r$r, method = "color")
PlotTargets(cellLine = c(26),
treatment = c("Apitolisib"),
timePoint = c(1, 24))
PlotTargets(cellLine = c(26),
treatment = c("Apitolisib", "GNE-317", "DMSO",
"Erlotinib", "Palbociclib"),
timePoint = c(1, 24))
CustomGraph <- function(graph) {
E(graph)$cor <- E(graph)$weight
E(graph)$weight <- abs(E(graph)$cor)
E(graph)$color <- ifelse(E(graph)$cor < 0, "darkblue", "grey50")
E(graph)$width <- 3 * atanh(E(graph)$weight)
V(graph)$label <- NA
}
graph <- g
CustomGraph(graph = graph)
V(graph)$label <- NA
colorList <- c("#a6cee3", "#1f78b4", "#b2df8a", "#33a02c", "#fb9a99", "#e31a1c",
"#fdbf6f", "#ff7f00", "#cab2d6", "#6a3d9a", "#ffff99", "#b15928",
"grey50")
targetList <- c("pPDK1 Ser341", "pGSK3Î² Ser9", "pp70S6K Thr389", "pS6 Ser235/6",
"pRb Ser780", "pAkt Thr308", "pS6 Ser240/4", "pRb Ser807/11",
"pmTOR Ser2448", "pMAPK Thr202/Tyr204", "pAkt Ser473",
"pSrc Tyr416", "hydroxy-HIF Pro564")
colors <- rep(colorList, each = 1)
V(graph)$color <- colors
graph <- delete.edges(graph, E(graph)[ abs(weight) < 0.8 ])
plot(graph, layout = layout.fruchterman.reingold)
plot(graph, layout = layout_as_star)
plot(graph, layout = layout_as_tree)
plot(graph, layout = layout_with_graphopt)
legend(x = -2, y = 1, targetList, pch=21,
col="grey50", pt.bg= colorList ,bty="n", ncol=1)
corrplot(holder.r$r, method = "color")
PlotTargets(cellLine = c(26),
treatment = c("Apitolisib", "GNE-317", "DMSO",
"Erlotinib", "Palbociclib"),
timePoint = c(24))
CustomGraph <- function(graph) {
E(graph)$cor <- E(graph)$weight
E(graph)$weight <- abs(E(graph)$cor)
E(graph)$color <- ifelse(E(graph)$cor < 0, "darkblue", "grey50")
E(graph)$width <- 3 * atanh(E(graph)$weight)
V(graph)$label <- NA
}
graph <- g
CustomGraph(graph = graph)
V(graph)$label <- NA
colorList <- c("#a6cee3", "#1f78b4", "#b2df8a", "#33a02c", "#fb9a99", "#e31a1c",
"#fdbf6f", "#ff7f00", "#cab2d6", "#6a3d9a", "#ffff99", "#b15928",
"grey50")
targetList <- c("pPDK1 Ser341", "pGSK3Î² Ser9", "pp70S6K Thr389", "pS6 Ser235/6",
"pRb Ser780", "pAkt Thr308", "pS6 Ser240/4", "pRb Ser807/11",
"pmTOR Ser2448", "pMAPK Thr202/Tyr204", "pAkt Ser473",
"pSrc Tyr416", "hydroxy-HIF Pro564")
colors <- rep(colorList, each = 1)
V(graph)$color <- colors
graph <- delete.edges(graph, E(graph)[ abs(weight) < 0.8 ])
plot(graph, layout = layout.fruchterman.reingold)
plot(graph, layout = layout_as_star)
plot(graph, layout = layout_with_graphopt)
plot(graph, layout = layout_as_tree)
legend(x = -2, y = 1, targetList, pch=21,
col="grey50", pt.bg= colorList ,bty="n", ncol=1)
corrplot(holder.r$r, method = "color")
PlotTargets(cellLine = c(6, 26),
treatment = c("Apitolisib", "GNE-317", "DMSO",
"Erlotinib", "Palbociclib"),
timePoint = c(24))
CustomGraph <- function(graph) {
E(graph)$cor <- E(graph)$weight
E(graph)$weight <- abs(E(graph)$cor)
E(graph)$color <- ifelse(E(graph)$cor < 0, "darkblue", "grey50")
E(graph)$width <- 3 * atanh(E(graph)$weight)
V(graph)$label <- NA
}
graph <- g
CustomGraph(graph = graph)
V(graph)$label <- NA
colorList <- c("#a6cee3", "#1f78b4", "#b2df8a", "#33a02c", "#fb9a99", "#e31a1c",
"#fdbf6f", "#ff7f00", "#cab2d6", "#6a3d9a", "#ffff99", "#b15928",
"grey50")
targetList <- c("pPDK1 Ser341", "pGSK3Î² Ser9", "pp70S6K Thr389", "pS6 Ser235/6",
"pRb Ser780", "pAkt Thr308", "pS6 Ser240/4", "pRb Ser807/11",
"pmTOR Ser2448", "pMAPK Thr202/Tyr204", "pAkt Ser473",
"pSrc Tyr416", "hydroxy-HIF Pro564")
colors <- rep(colorList, each = 1)
V(graph)$color <- colors
graph <- delete.edges(graph, E(graph)[ abs(weight) < 0.8 ])
plot(graph, layout = layout.fruchterman.reingold)
plot(graph, layout = layout_as_star)
plot(graph, layout = layout_with_graphopt)
plot(graph, layout = layout_as_tree)
legend(x = -2, y = 1, targetList, pch=21,
col="grey50", pt.bg= colorList ,bty="n", ncol=1)
corrplot(holder.r$r, method = "color")
setwd("D:/Google Drive/Research/Notebook/2017/06/21/20170621_gaskMXP-01a_06212017/")
dat <- read_csv("plots/MXP-01a_netShifts_ch1step_1.csv")
dat.a.ch1 <- read_csv("plots/MXP-01a_netShifts_ch1step_1.csv")
dat.a.ch1 <- read_csv("plots/MXP-01a_netShifts_ch1step_1.csv")
dat.a.ch2 <- read_csv("plots/MXP-01a_netShifts_ch2step_1.csv")
head(dat.a.ch1)
View(dat.a.ch1)
source('D:/Google Drive/Research/GitRepositories/XenograftProteinProfiling/1_ProcessRawRingData.R', echo=TRUE)
getwd()
GetName()
GetName()
source('D:/Google Drive/Research/GitRepositories/XenograftProteinProfiling/1_ProcessRawRingData.R', echo=TRUE)
GetName()
GetName()
source('D:/Google Drive/Research/GitRepositories/XenograftProteinProfiling/1_ProcessRawRingData.R', echo=TRUE)
AggData()
GetName()
directory <- basename(getwd())
name <- unlist(strsplit(directory, split = "_"))
name <- name[2]
name <<- gsub('gask','',name) # removes "gask" from name
